# Default server configuration
upstream tomcat {
    server 127.0.0.1:8080 fail_timeout=0;
}

server {


listen 443 ssl;

server_name app.brocode.in;
ssl_certificate /etc/letsencrypt/live/app.brocode.in/fullchain.pem;
 ssl_certificate_key /etc/letsencrypt/live/app.brocode.in/privkey.pem;
 location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
#               try_files $uri $uri/ =404;
        proxy_pass http://tomcat/;

        }
}

server {


#:listen 80;
listen 443 ssl;

server_name hopp.brocode.in;
ssl_certificate /etc/letsencrypt/live/app.brocode.in/fullchain.pem;
 ssl_certificate_key /etc/letsencrypt/live/app.brocode.in/privkey.pem;

                # First attempt to serve request as file, then
root /var/www/brocode/html;
index subdomain.html;
}
server {
        listen 443 ssl;

        root /var/www/brocode/html;
        index index.html;

        server_name brocode.in www.brocode.in;
ssl_certificate /etc/letsencrypt/live/app.brocode.in/fullchain.pem;
 ssl_certificate_key /etc/letsencrypt/live/app.brocode.in/privkey.pem;


        location / {
                try_files $uri $uri/ =404;

        }
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security max-age=15768000;
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
}
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
}


Add address="127.0.0.1" to both the connectors in server.xml file
Deny 8080 port from firewall and aws